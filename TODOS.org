# Bot de compilation des résultats pour le pour le landing rate (CptCanada Youtube)

* Sync du leaderboard
** Serveur
*** DONE Creer la table de resultats
*** DONE Créer une route pour recevoir les résultats
**** DONE Créer la route
**** DONE Sauvegarder les résultats
*** DONE Afficher l'ensemble des résultats sans tri 
**** DONE Modifier l'APPLI frontend (utiliser meals)
*** DONE Pouvoir trier les résultats comme dans le client
*** DONE Pouvoir rechercher un utilisateur
**** Conserver le rang des résultats en fonction du tri
*** DONE Mettre en production
**** NEXT Installer MySQL sur le serveur
**** Installer PHP7
*** TODO Sélectionner la période
*** TODO Créer la table partie
**** Créer un point d'entrée pour ajouter une partie
*** Afficher les résultats par partie
**** Dans une vue "today" diviser les gagnants par partie
** Client
*** DONE Pouvoir sauvegarder un token de sync
**** DONE Dans la page de paramètres généralisés
*** DONE Envoyer les données
**** DONE Obtenir les résultats non publiés
**** DONE Vérifier au démarrage du programme
**** DONE Afficher le pourcentage de transfert
*** Créer une partie et obtenir l'ID
**** Après l'atterissage, dans une premise

* DONE Créer une page Leaderboard
** Phase d'expérimentation
*** Installer LokiJS pour faire de la persistence de données indexés NoSql 
*** Données de test l'affichage/sauvegarde/restauration
**** À chaque fois qu'on appuit sur le bouton (récupérer)
***** On sauvegarde les commentaires depuit le dernier index dans une table "chat-test"
***** On met à jour les informations du leaderboard avec les statistiques suivantes
****** Le nombre de fois que l'usager a écrit dans le chat
****** Une médaille (aléatoire)
**** Les informations sont persistentes entre les sessions
***** Les données sont stockés de preference dans le dossier appdata, comme storage
** Information dans le tableau final
*** Rang
**** Tri: Croissant/décroissant
*** Nom et photo
*** Nombre de participations
**** Tri: Croissant/décroissant
*** Différence moyenne
**** Tri: Croissant/décroissant
*** Médailles (un emoji par médaille gagnée)
**** Tri: Chaque médaille a un poids, trier par la somme du poid des médailles
***** Or: 5.5
***** Argent: 2.5
***** Bronze: 1
* DONE Modifier le fonctionnement du reset pour utiliser le dernier index au lieu d'une timestamp
  - La comparaison de dates semble entrainer des problèmes (voit seulment deux votes au lieu de 30..)
* DONE Self-Update
** Trouver un empalcement sur un serveur quelconque
* DONE Permettre d'envoyer un rapport de logs (toute la console) par courriel
** TODO Ajouter des timestamps pour les éléments importants (pour pouvoir comparer)
* DONE Permettre l'ajout et la modification du message d'arrêt des votes.
* DONE Créer un bot compilateurs de votes 
** DONE Stocker le token du youtube et récupérer à l'ouverture de l'application
*** Stocker après login
*** Récupérer et valider après ouverture
** DONE Écouter le chat youtube et afficher dans l'application
**** Quand il y a un livestream, la vue passe au jeu
***** 3 États: 
****** Non débuté
******* Un bouton pour commencer le concours (avant atterissage)
****** Débuté
******* Un bouton pour terminer le concours
******* Un bouton pour annuler le concours
******* La liste des participants avec leur vitesse estimée
******** Option pour supprimer un guess de la liste
****** Terminé
******* Voir les trois gagants
******* Bouton pour commencer un nouveau concours
******* La liste en lecture seule
*** DONE Sauvegarder les nouveau messages dans le store
** DONE Fenêtre de concours
*** Gérer l'état du concours
**** Commencer le concours
**** Terminer le concours
**** Compiler les résultats
*** Voir l'état du concours
**** Débuté / Non débutté
**** Si débutté: 
***** Liste des résultats compilés
**** Si terminé: 
***** Liste des gagnants
***** Bouton pour poster un message
****** Pouvoir voir et modifier le message avant l'envoi
****** Voir si le message a déja été envoyé
*** Modifier les paramètres
**** Modifier le message de Début / Fin de compilation (ou désactiver)
**** Modifier le message d'annonce du gagnant 
* DONE Obtenir les données directement du simulateur
  - Utiliser les données directement du plugin de landing rate de Dan Berry
  - Le programme agit comme serveur pour recevoir les données sur un port:
    - L'atterissage et la vitesse
    - Le décolage (reset)
** DONE Créer un serveur avec Express
** DONE Communiquer avec le jeu sur le processus principal avec le bus ipc
*** Un évènement par route, géré dans game.js
** DONE Créer des routes pour les interventions du plugin
*** Atterissage
*** Reset

